// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package queries

import (
	"context"
	"database/sql"
)

const addAddress = `-- name: AddAddress :execresult
INSERT INTO addresses (
	country, city, street, house, apartments
) VALUES (
	?, ?, ?, ?, ?
)
`

type AddAddressParams struct {
	Country    string
	City       string
	Street     string
	House      string
	Apartments sql.NullString
}

func (q *Queries) AddAddress(ctx context.Context, arg AddAddressParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addAddress,
		arg.Country,
		arg.City,
		arg.Street,
		arg.House,
		arg.Apartments,
	)
}

const addPerson = `-- name: AddPerson :execresult
INSERT INTO persons (
	person_name, phone, addressID
) VALUES (
	?, ?, ?
)
`

type AddPersonParams struct {
	PersonName string
	Phone      string
	Addressid  int32
}

func (q *Queries) AddPerson(ctx context.Context, arg AddPersonParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addPerson, arg.PersonName, arg.Phone, arg.Addressid)
}

const addressById = `-- name: AddressById :one
SELECT id, country, city, street, house, apartments from addresses
WHERE id = ?
`

func (q *Queries) AddressById(ctx context.Context, id int32) (Address, error) {
	row := q.db.QueryRowContext(ctx, addressById, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.City,
		&i.Street,
		&i.House,
		&i.Apartments,
	)
	return i, err
}

const addressID = `-- name: AddressID :one
SELECT id from addresses
WHERE country = ? and city = ? and street = ? and house = ? and apartments <=> ?
`

type AddressIDParams struct {
	Country    string
	City       string
	Street     string
	House      string
	Apartments sql.NullString
}

func (q *Queries) AddressID(ctx context.Context, arg AddressIDParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addressID,
		arg.Country,
		arg.City,
		arg.Street,
		arg.House,
		arg.Apartments,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const addressList = `-- name: AddressList :many
SELECT id, country, city, street, house, apartments from addresses
ORDER BY country, city, street, house, apartments DESC
`

func (q *Queries) AddressList(ctx context.Context) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, addressList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.Country,
			&i.City,
			&i.Street,
			&i.House,
			&i.Apartments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM persons 
WHERE id = ?
`

func (q *Queries) DeletePerson(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePerson, id)
	return err
}

const personByID = `-- name: PersonByID :one
SELECT p.id, person_name, phone, addressid, a.id, country, city, street, house, apartments FROM persons as p 
LEFT JOIN addresses as a ON p.addressID = a.id
WHERE p.id = ?
`

type PersonByIDRow struct {
	ID         int32
	PersonName string
	Phone      string
	Addressid  int32
	ID_2       int32
	Country    string
	City       string
	Street     string
	House      string
	Apartments sql.NullString
}

func (q *Queries) PersonByID(ctx context.Context, id int32) (PersonByIDRow, error) {
	row := q.db.QueryRowContext(ctx, personByID, id)
	var i PersonByIDRow
	err := row.Scan(
		&i.ID,
		&i.PersonName,
		&i.Phone,
		&i.Addressid,
		&i.ID_2,
		&i.Country,
		&i.City,
		&i.Street,
		&i.House,
		&i.Apartments,
	)
	return i, err
}

const personList = `-- name: PersonList :many
SELECT p.id, person_name, phone, addressid, a.id, country, city, street, house, apartments FROM persons as p 
LEFT JOIN addresses as a ON p.addressID = a.id
`

type PersonListRow struct {
	ID         int32
	PersonName string
	Phone      string
	Addressid  int32
	ID_2       int32
	Country    string
	City       string
	Street     string
	House      string
	Apartments sql.NullString
}

func (q *Queries) PersonList(ctx context.Context) ([]PersonListRow, error) {
	rows, err := q.db.QueryContext(ctx, personList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PersonListRow
	for rows.Next() {
		var i PersonListRow
		if err := rows.Scan(
			&i.ID,
			&i.PersonName,
			&i.Phone,
			&i.Addressid,
			&i.ID_2,
			&i.Country,
			&i.City,
			&i.Street,
			&i.House,
			&i.Apartments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
