// Code generated by sqlc. DO NOT EDIT.
// source: query_address.sql

package queries

import (
	"context"
	"database/sql"
)

const addAddress = `-- name: AddAddress :execresult
INSERT INTO addresses (
	country, city, street, house, apartments
) VALUES (
	?, ?, ?, ?, ?
)
`

type AddAddressParams struct {
	Country    string
	City       string
	Street     string
	House      string
	Apartments sql.NullString
}

func (q *Queries) AddAddress(ctx context.Context, arg AddAddressParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addAddress,
		arg.Country,
		arg.City,
		arg.Street,
		arg.House,
		arg.Apartments,
	)
}

const addressById = `-- name: AddressById :one
SELECT id, country, city, street, house, apartments from addresses
WHERE id = ?
`

func (q *Queries) AddressById(ctx context.Context, id int32) (Address, error) {
	row := q.db.QueryRowContext(ctx, addressById, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.City,
		&i.Street,
		&i.House,
		&i.Apartments,
	)
	return i, err
}

const addressID = `-- name: AddressID :one
SELECT id from addresses
WHERE country = ? and city = ? and street = ? and house = ? and apartments <=> ?
`

type AddressIDParams struct {
	Country    string
	City       string
	Street     string
	House      string
	Apartments sql.NullString
}

func (q *Queries) AddressID(ctx context.Context, arg AddressIDParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addressID,
		arg.Country,
		arg.City,
		arg.Street,
		arg.House,
		arg.Apartments,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const addressList = `-- name: AddressList :many
SELECT id, country, city, street, house, apartments from addresses
ORDER BY country, city, street, house, apartments DESC
`

func (q *Queries) AddressList(ctx context.Context) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, addressList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.Country,
			&i.City,
			&i.Street,
			&i.House,
			&i.Apartments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
