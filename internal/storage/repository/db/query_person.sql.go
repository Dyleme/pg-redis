// Code generated by sqlc. DO NOT EDIT.
// source: query_person.sql

package queries

import (
	"context"
	"database/sql"
)

const addPerson = `-- name: AddPerson :execresult
INSERT INTO persons (
	person_name, phone, addressID
) VALUES (
	?, ?, ?
)
`

type AddPersonParams struct {
	PersonName string
	Phone      string
	Addressid  int32
}

func (q *Queries) AddPerson(ctx context.Context, arg AddPersonParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addPerson, arg.PersonName, arg.Phone, arg.Addressid)
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM persons 
WHERE id = ?
`

func (q *Queries) DeletePerson(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePerson, id)
	return err
}

const personByID = `-- name: PersonByID :one
SELECT id, person_name, phone, addressid FROM persons
WHERE id = ?
`

func (q *Queries) PersonByID(ctx context.Context, id int32) (Person, error) {
	row := q.db.QueryRowContext(ctx, personByID, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.PersonName,
		&i.Phone,
		&i.Addressid,
	)
	return i, err
}

const personList = `-- name: PersonList :many
SELECT id, person_name, phone, addressid FROM persons
ORDER BY person_name
`

func (q *Queries) PersonList(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, personList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.PersonName,
			&i.Phone,
			&i.Addressid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
